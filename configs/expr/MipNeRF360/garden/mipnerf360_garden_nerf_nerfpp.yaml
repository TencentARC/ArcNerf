name: mipnerf360_garden_nerf_nerfpp

resume: None

debug:
    debug_mode: False
    print_all_grad: False
    get_progress: False

dir:
    expr_dir: None
    data_dir: '/group/30042/leoyluo/Immerse/data'
    eval_dir: '/group/30042/leoyluo/Immerse/projects/ArcNerf/results/mipnerf360_garden_nerf_nerfpp'

model_pt: '/group/30042/leoyluo/Immerse/projects/ArcNerf/experiments/mipnerf360_garden_nerf_nerfpp/checkpoints/final.pt.tar'

gpu_ids: -1

dist:
    local_rank: 0
    rank: 0
    world_size: 1
    distributed_backend: nccl
    random_seed: None
    slurm: False

batch_size: 2
n_rays: 4096
worker: 4

optim:
    lr: 5e-4
    optim_type: adam
    weight_decay: 0.0
    lr_scheduler:
        type: ExponentialLR
        lr_gamma: 0.1
        lr_steps: [500000]

    clip_gradients: 0.0
    clip_warmup: -1
    clip_gradients_warmup: 0.0

progress:
    start_epoch: -1
    epoch: 300000
    save_time: 1800

    epoch_loss: 100
    iter_loss: 1
    save_progress: True
    epoch_save_progress: 50000
    iter_save_progress: 1

    epoch_val: 50000
    save_progress_val: True
    max_samples_val: 1

    epoch_save_checkpoint: 100000
    local_progress: False

    init_eval: False
    epoch_eval: 100000
    max_samples_eval: 25

dataset:
    train:
        type: MipNeRF360
        scene_name: garden
        test_holdout: 24
        img_scale: 0.25
        scale_radius: 3.0
        cam_t_offset:  [0.0, 1.4, 0.0]
        device: gpu
        precache: True

    val:
        type: MipNeRF360
        scene_name: garden
        test_holdout: 24
        img_scale: 0.25
        scale_radius: 3.0
        cam_t_offset:  [0.0, 1.4, 0.0]
        device: gpu
        precache: False

    eval:
        type: MipNeRF360
        scene_name: garden
        test_holdout: 24
        img_scale: 0.25
        scale_radius: 3.0
        cam_t_offset:  [0.0, 1.4, 0.0]
        device: gpu
        precache: True

#inference:
#    to_gpu: True
#    render:
#        type: [spiral]
#        n_cam: [60]
#        repeat: [1]
#        radius: 3.0
#        u_start: 0.0
#        v_range: [-0.3, -0.1]
#        fps: 5
#
#    volume:
#        n_grid: 512
#        side: 2.0
#        level: 50.0
#        chunk_pts_factor: 16
#        render_mesh:
#            backend: pytorch3d

model:
    type: NeRF
    rays:
        bounding_radius: 3.0
        near: 1.5  # less sample required more accurate sample
        # far: 4.5
        n_sample: 32
        n_importance: 64
        inverse_linear: False
        perturb: True
        add_inf_z: False    # should not use inf for foreground rgb ray_marching
        noise_std: 0.0
        white_bkg: False
    chunk_rays: 32768
    chunk_pts: 131072
    geometry:
        W: 256
        D: 8
        skips: [4]
        encoder:
            type: FreqEmbedder
            input_dim: 3
            n_freqs: 10
        W_feat: 256
        geometric_init: False
    radiance:
        mode: 'vf'
        W: 128
        D: 1
        encoder:
            view:
                type: FreqEmbedder
                input_dim: 3
                n_freqs: 4
        W_feat_in: 256
    background:
        type: NeRFPP
        bkg_blend: 'rgb'
        rays:
            bounding_radius: 3.0
            n_sample: 32
            n_importance: 64
            perturb: True
            add_inf_z: True         # must set to be True
            noise_std: 0.0
            white_bkg: False
        chunk_rays: 32768
        chunk_pts: 131072
        geometry:
            W: 256
            D: 8
            skips: [4]
            encoder:
                type: FreqEmbedder
                input_dim: 4              # xyz+1/r input channel
                n_freqs: 10
            W_feat: 256
            geometric_init: False
        radiance:
            mode: 'vf'
            W: 128
            D: 1
            encoder:
                view:
                    type: FreqEmbedder
                    input_dim: 3
                    n_freqs: 4
            W_feat_in: 256

loss:
    ImgLoss:
        keys: [ 'rgb_coarse', 'rgb_fine' ]
        weight: 1.0

metric:
    PSNR:

train_metric:
    PSNR:
        key: 'rgb_fine'
