name: nerf_lego_neus_ngp_resample

resume: None

debug:
    debug_mode: False
    print_all_grad: False
    get_progress: False  # remove this when real run

dir:
    expr_dir: None
    data_dir: '/group/30042/leoyluo/Immerse/data'
    eval_dir: '/group/30042/leoyluo/Immerse/projects/ArcNerf/results/nerf_lego_neus_ngp_resample'

model_pt: '/group/30042/leoyluo/Immerse/projects/ArcNerf/experiments/nerf_lego_neus_ngp_resample/checkpoints/final.pt.tar'

gpu_ids: -1

dist:
    local_rank: 0
    rank: 0
    world_size: 1
    distributed_backend: nccl
    random_seed: None
    slurm: False

batch_size: 2
n_rays: 4096
worker: 4

optim:
    ema:
        decay: 0.95
    lr: 1e-2
    optim_type: adam
    weight_decay: 1e-6
    eps: 1e-15
    lr_scheduler:
        type: MultiStepLR
        lr_gamma: 0.33
        lr_steps: [20000, 30000, 40000, 50000]

    clip_gradients: 0.0
    clip_warmup: -1
    clip_gradients_warmup: 0.0

progress:
    start_epoch: -1
    epoch: 50000
    save_time: 600

    epoch_loss: 100
    iter_loss: 1
    save_progress: True
    epoch_save_progress: 5000
    iter_save_progress: 1

    epoch_save_checkpoint: 10000
    local_progress: True

    epoch_val: 5000
    save_progress_val: True
    max_samples_val: 1

    init_eval: False
    epoch_eval: 10000
    max_samples_eval: 25

dataset:
    train:
        type: NeRF
        scene_name: lego
        img_scale: 1.0
        center_pixel: True
        scale_radius: 3.0
        precache: True
        device: gpu
        scheduler:
            precrop: # precrop
                ratio: 0.5
                max_epoch: 500
            bkg_color:
                color: random
            dynamic_batch_size:
                update_epoch: 16

    val:
        skip: 8
        type: NeRF
        scene_name: lego
        img_scale: 1.0
        center_pixel: True
        scale_radius: 3.0
        precache: False
        device: gpu
        augmentation:
            blend_bkg_color:
                bkg_color: [1.0, 1.0, 1.0]

    eval:
        eval_batch_size: 1
        skip: 8
        type: NeRF
        scene_name: lego
        img_scale: 1.0
        center_pixel: True
        scale_radius: 3.0
        precache: False
        device: gpu
        augmentation:
            blend_bkg_color:
                bkg_color: [1.0, 1.0, 1.0]

inference:
    to_gpu: True
    render:
        type: [spiral]
        n_cam: [60]
        repeat: [1]
        radius: 3.0
        u_start: 0.5
        v_range: [-0.6, -0.2]
        fps: 5
        center_pixel: True
        surface_render:
            chunk_rays_factor: 1024
            method: sphere_tracing

    volume:
        n_grid: 512
        side: 2.0
        level: 0.0
        grad_dir: ascent
        chunk_pts_factor: 1
        render_mesh:
            backend: pytorch3d

model:
    type: Neus
    obj_bound:
        volume:
            n_grid: 128
            side: 2.0
        epoch_optim: 16
        epoch_optim_warmup: 256
        ray_sample_acc: True
        ray_sample_fix_step: True
        near_distance: 0.2
        opa_thres: 0.01
        bkg_color: [1.0, 1.0, 1.0]  # If want black-background, set [0.0, 0.0, 0.0]
        log_max_allowance: 18  # only used for dynamic batch_size, 1 << 18 = 4096*64
    rays:
        radius_bound: 1.5
        n_sample: 1024
        n_importance: 16  # resample on surface
        n_iter: 4
        inverse_linear: False
        perturb: True
        add_inf_z: False
        noise_std: 0.0
        white_bkg: True  # for eval only, if want black-background, set [0.0, 0.0, 0.0]
    params:
        speed_factor: 10              # factor for inv_s = -np.log(init_var)/10 ~= 0.3
        init_var: 0.05                # init var, when it approaches 0, cdf more close
        anneal_end: 50000             # for anneal param, only set during training. please
    chunk_rays: 32768   # 4096 * 16
    chunk_pts: 1048576  # 4096 * 256
    geometry:
        W: 64
        D: 1
        use_bias: False
        skips: []
        encoder:
            type: HashGridEmbedder
            input_dim: 3
            n_freqs: 0  # do not do geo init
            side: 2.0
            n_levels: 16
            n_feat_per_entry: 2
            hashmap_size: 19
            base_res: 16
            max_res: 2048
            include_input: False
            backend: tcnn
            dtype: torch.float32
        W_feat: 16
        geometric_init: True          # use geometric init. need radius_init
        radius_init: 0.5              # geometric init sphere radius
        weight_norm: True
        skip_reduce_output: True
        norm_skip: True
        act_cfg: # activation function for dense layer
            type: softplus
            beta: 100
    radiance:
        type: FusedMLPRadianceNet  # fuse mlp here, other nan error
        mode: 'pvnf'
        W: 64
        D: 2
        encoder:
            pts:
                type: FreqEmbedder
                input_dim: 3
                n_freqs: 0            # xyz embed freq, not embedding performed
            view:
                type: SHEmbedder
                input_dim: 3
                n_freqs: 4
                include_input: False
                backend: tcnn
        W_feat_in: 16
        weight_norm: True

loss:
    ImgLoss:
        loss_type: Huber
        use_mask: True
        delta: 0.1
        weight: 5
    MaskLoss:
        loss_type: BCE
        weight: 0.1
    EikonalLoss:
        key: normal_pts
        weight: 0.1

metric:
    PSNR:

train_metric:
    PSNR:
